generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Business {
  business_id       Int           @id @default(autoincrement())
  b_user_id         Int
  b_type_id         Int
  business_tax_id   String
  name              String
  short_description String
  full_description  String
  address           String
  district          String
  canton            String
  province          String
  latitude          Decimal       @db.Decimal(9, 6)
  longitude         Decimal       @db.Decimal(9, 6)
  days_operation    String
  operates_from     String
  operates_to       String
  link              String?
  phone_number      String?
  BusinessUser      BusinessUser  @relation(fields: [b_user_id], references: [b_user_id], onDelete: NoAction, onUpdate: NoAction, map: "Business_fk1")
  BusinessTypes     BusinessTypes @relation(fields: [b_type_id], references: [b_type_id], onDelete: NoAction, onUpdate: NoAction, map: "Business_fk2")
  Images            Images[]
  Review            Review[]
}

model BusinessTypes {
  b_type_id Int        @id @default(autoincrement())
  name      String
  Business  Business[]
}

model BusinessUser {
  b_user_id  Int        @id @default(autoincrement())
  first_name String
  last_name  String
  email      String     @unique
  password   String
  phone_area String?
  phone      String?
  Business   Business[]
  Tour       Tour[]
}

model Images {
  image_id    Int       @id @default(autoincrement())
  business_id Int?
  tour_id     Int?
  image       Bytes
  Business    Business? @relation(fields: [business_id], references: [business_id], onDelete: Cascade, map: "Images_fk1")
  Tour        Tour?     @relation(fields: [tour_id], references: [tour_id], onDelete: Cascade, map: "Images_fk2")
}

model Itinerary {
  itinerary_id  Int      @id @default(autoincrement())
  user_id       Int
  tour_id       Int
  tour_datetime DateTime @db.Timestamp(6)
  assistants    Int
  User          User     @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "Itinerary_fk1")
  Tour          Tour     @relation(fields: [tour_id], references: [tour_id], onDelete: NoAction, onUpdate: NoAction, map: "Itinerary_fk2")
}

model PaymentCard {
  card_id     Int      @id @default(autoincrement())
  user_id     Int
  card_type   String
  card_number String
  exp_date    DateTime @db.Date
  cvv         String
  User        User     @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "PaymentCard_fk1")
}

model Reservation {
  reservation_id       Int      @id @default(autoincrement())
  user_id              Int
  tour_id              Int
  first_name           String
  last_name            String
  email                String
  phone                String
  order_datetime       DateTime @db.Timestamp(6)
  reservation_datetime DateTime @db.Timestamp(6)
  assistants           Int
  total                Decimal  @db.Decimal(10, 2)
  reservation_comment  String?
  status               String
  User                 User     @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "Reservation_fk1")
  Tour                 Tour     @relation(fields: [tour_id], references: [tour_id], onDelete: NoAction, onUpdate: NoAction, map: "Reservation_fk2")
}

model Review {
  review_id   Int       @id @default(autoincrement())
  user_id     Int
  tour_id     Int?
  business_id Int?
  rating      Int
  comment     String?
  User        User      @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "Review_fk1")
  Tour        Tour?     @relation(fields: [tour_id], references: [tour_id], onDelete: NoAction, onUpdate: NoAction, map: "Review_fk2")
  Business    Business? @relation(fields: [business_id], references: [business_id], onDelete: NoAction, onUpdate: NoAction, map: "Review_fk3")
}

model Tour {
  tour_id           Int           @id @default(autoincrement())
  name              String
  short_description String
  full_description  String
  address           String
  district          String
  canton            String
  province          String
  latitude          Decimal       @db.Decimal(9, 6)
  longitude         Decimal       @db.Decimal(9, 6)
  price_person      Decimal       @db.Decimal(10, 2)
  discount          Decimal?      @db.Decimal(10, 2)
  discount_start    DateTime?     @db.Date
  discount_end      DateTime?     @db.Date
  days_operation    String
  operates_from     String
  operates_to       String
  b_user_id         Int
  phone_number      String
  Images            Images[]
  Itinerary         Itinerary[]
  Reservation       Reservation[]
  Review            Review[]
  BusinessUser      BusinessUser  @relation(fields: [b_user_id], references: [b_user_id], onDelete: Cascade, map: "public_Tour_b_user_id_fkey")
}

model User {
  user_id     Int           @id @default(autoincrement())
  first_name  String
  last_name   String
  email       String        @unique
  password    String
  phone_area  String?
  phone       String?
  Itinerary   Itinerary[]
  PaymentCard PaymentCard[]
  Reservation Reservation[]
  Review      Review[]
}
